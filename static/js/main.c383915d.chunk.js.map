{"version":3,"sources":["fonts/Shapiro 95 Super Wide.ttf","components/Button.jsx","components/NavBar.jsx","components/Scanner.jsx","App.js","components/View.jsx","views/ScannerView.js","serviceWorker.js","components/Heading.jsx","components/BottomSheet.jsx","index.js"],"names":["module","exports","Button","Component","class","type","this","props","caption","Scanner","state","result","handleError","err","console","error","style","width","delay","onError","onScan","data","facingMode","showViewFinder","objectFit","App","View","className","name","content","ScannerView","handleScan","alert","Boolean","window","location","hostname","match","Heading","text","BottomSheet","buttons","map","button","key","id","to","path","document","body","overflow","router","exact","component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sLAAAA,EAAOC,QAAU,IAA0B,mD,sRCY5BC,GCVMC,Y,uLDIb,OACI,4BAAQC,MAAM,gBAAgBC,KAAK,UAAUC,KAAKC,MAAMC,a,GAH/CL,c,iBE6BNM,G,iNA3BXC,MAAQ,CACJC,OAAQ,a,EAGZC,YAAc,SAAAC,GACVC,QAAQC,MAAMF,I,wEAGR,IAAD,OAKL,OACI,kBAAC,IAAD,CACIG,MANa,CACjBC,MAAO,QAMHC,MAAO,IACPC,QAASb,KAAKM,YACdQ,OAAQ,SAACC,GAAD,OAAU,EAAKd,MAAMa,OAAOC,IACpCC,WAAY,OACZC,gBAAgB,EAChBC,UAAW,a,GAtBLrB,c,YCSPsB,ICAAC,E,iLARP,OACI,6BAASC,UAAWrB,KAAKC,MAAMqB,KAAO,SACjCtB,KAAKC,MAAMsB,a,GAJT1B,aCIE2B,G,iNACjBC,WAAa,SAAAV,GACLA,GACAW,MAAMX,I,wEAKV,OACI,kBAAC,EAAD,CAAMO,KAAK,eAAeC,QACtB,kBAAC,EAAD,CAAST,OAAQd,KAAKyB,mB,GAVG5B,c,MCIrB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCJSC,G,uLARP,OACI,uBAAGX,UAAU,WACRrB,KAAKC,MAAMgC,U,GAJNpC,cCgBPqC,G,uLAXP,OACI,yBAAKb,UAAU,wBACX,kBAAC,EAAD,CAASY,KAAK,0CACZjC,KAAKC,MAAMkC,QAAQC,KAAI,SAAAC,GAAM,OAAI,kBAAC,IAAD,CAAMC,IAAKD,EAAOE,GAAIC,GAAIH,EAAOI,MAChE,kBAAC,EAAD,CAAQvC,QAASmC,EAAOf,gB,GANlBzB,cCU1B6C,SAASC,KAAKjC,MAAMkC,SAAW,SAE/B,IAIMC,EACF,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAaV,QANN,CACX,CAAEI,GAAI,EAAGE,KAAM,IAAKnB,KAAM,qBAOtB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOwB,OAAK,EAACL,KAAK,IAAIM,UAAWvB,IACjC,kBAAC,IAAD,CAAOiB,KAAK,QAAQM,UAAWvB,MAK3CwB,IAASC,OAAOJ,EAAQH,SAASQ,eAAe,SHiG1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLD,QAAQC,MAAMA,EAAMiD,c","file":"static/js/main.c383915d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Shapiro 95 Super Wide.61d032e8.ttf\";","import React, { Component } from 'react';\r\n\r\nimport \"./Button.css\";\r\n\r\nclass Button extends Component {\r\n    render() { \r\n        return ( \r\n            <button class=\"button ripple\" type=\"submit\">{this.props.caption}</button>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Button;","import React, { Component } from \"react\";\r\n\r\nclass NavBar extends Component {\r\n    render() { \r\n        return (  \r\n            <nav className=\"navbar navbar-light bg-light\">\r\n                <span className=\"navbar-brand mb-0 h1\">{this.props.title}</span>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n \r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport QrReader from 'react-qr-scanner';\r\n\r\nimport \"./Scanner.css\";\r\n\r\nclass Scanner extends Component {\r\n    state = {  \r\n        result: \"No Result\"\r\n    }\r\n\r\n    handleError = err => {\r\n        console.error(err);\r\n    }\r\n\r\n    render() { \r\n        const previewStyle = {\r\n            width: \"100%\"\r\n        }\r\n\r\n        return (\r\n            <QrReader\r\n                style={previewStyle}\r\n                delay={300}\r\n                onError={this.handleError}\r\n                onScan={(data) => this.props.onScan(data)}\r\n                facingMode={\"rear\"}\r\n                showViewFinder={false}\r\n                objectFit={\"fill\"}\r\n            />\r\n        );\r\n    }\r\n}\r\n \r\nexport default Scanner;","import React from \"react\";\nimport NavBar from \"./components/NavBar.jsx\";\nimport Button from \"./components/Button.jsx\";\nimport Scanner from \"./components/Scanner.jsx\";\nimport { APP_NAME } from \"./strings\";\n\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <Scanner />\n    );\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\n\r\nimport \"./View.css\";\r\n\r\nclass View extends Component {\r\n    render() { \r\n        return (  \r\n            <section className={this.props.name + \" view\"}>\r\n                {this.props.content}\r\n            </section>\r\n        );\r\n    }\r\n}\r\n \r\nexport default View;","import React, { Component } from 'react';\r\nimport View from \"./../components/View.jsx\";\r\nimport Scanner from \"./../components/Scanner.jsx\";\r\n\r\nimport \"./ScannerView.css\";\r\n\r\n\r\n\r\nexport default class ScannerView extends Component {\r\n    handleScan = data => {\r\n        if (data) {\r\n            alert(data);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <View name=\"scanner-view\" content={\r\n                <Scanner onScan={this.handleScan}/>\r\n            }/>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nimport \"./Heading.css\";\r\n\r\nclass Heading extends Component {\r\n    render() { \r\n        return (  \r\n            <p className=\"heading\">\r\n                {this.props.text}\r\n            </p>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Heading;","import React, { Component } from \"react\";\r\nimport Heading from './Heading.jsx';\r\nimport Button from './Button.jsx';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport \"./BottomSheet.css\"\r\n\r\nclass BottomSheet extends Component {\r\n    render() { \r\n        return (  \r\n            <div className=\"acrylic bottom-sheet\">\r\n                <Heading text=\"Start to scan the question's QR code!\"/>\r\n                { this.props.buttons.map(button => <Link key={button.id} to={button.path}>\r\n                    <Button caption={button.name}></Button>\r\n                </Link>) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default BottomSheet;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './fonts.css';\nimport './fonts/Shapiro 95 Super Wide.ttf'\nimport App from './App';\nimport ScannerView from \"./views/ScannerView\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport BottomSheet from \"./components/BottomSheet.jsx\";\n\ndocument.body.style.overflow = \"hidden\";\n\nconst routes = [\n    { id: 1, path: \"/\", name: \"Start scanning\"}\n];\n\nconst router = (\n    <Router>\n        <BottomSheet buttons={routes}/>\n\n        <Switch>\n            <Route exact path=\"/\" component={ScannerView}/>\n            <Route path=\"/scan\" component={ScannerView}/>\n        </Switch>\n    </Router>\n);\n\nReactDOM.render(router, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}